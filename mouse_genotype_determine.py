import argparse
import pandas as pd

parser = argparse.ArgumentParser()
parser.add_argument("--csv", required=True, type=str)
args = parser.parse_args()

genotyping_df = pd.DataFrame()
result = pd.read_csv(args.csv)

y = 0
for x in result["Tardbp-3 FL"]:
    if x == "+  ":
        result.at[y, "Tardbp"] = "Tf/Tf"
        if result["Tardbp-3 WT"][y] == "+  ":
            result.at[y, "Tardbp"] = "Tf/x"
        y = y + 1
    else:
        result.at[y, "Tardbp"] = ""
        y = y + 1

z = 0
for i in result["Chat-1 TG"]:
    if i == "+  ":
        result.at[z, "Chat-1"] = "Cre/Cre"
        if result["Chat-1 WT"][z] == "+  ":
            result.at[z, "Chat-1"] = "Cre/x"
        z = z + 1
    else:
        result.at[z, "Chat-1"] = ""
        z = z + 1

result["TranslatedResult"] = result["Tardbp"] + "_" + result["Chat-1"]

j = 0
for type in result["TranslatedResult"]:
    if type == "Tf/x_":
        result.at[j, "TranslatedResult"] = "Tf/x"
        j = j + 1
    elif type == "Tf/Tf_":
        result.at[j, "TranslatedResult"] = "Tf/Tf"
        j = j + 1
    elif type == "_Cre/x":
        result.at[j, "TranslatedResult"] = "Cre/x"
        j = j + 1
    elif type == "_Cre/Cre":
        result.at[j, "TranslatedResult"] = "Cre/Cre"
        j = j + 1
    else: 
        j = j + 1

columns_to_drop = ["Tardbp", "Chat-1"]
result = result.drop(columns_to_drop, axis=1)
# In the case of a DataFrame, axis=1 refers to the columns axis, while axis=0 refers to the rows axis

result.to_csv(args.csv, index=False)
# If index=True, the index values 0, 1, 2, and so on are automatically generated by pandas as the row labels
# When writing the DataFrame to the CSV file, these index values are included as a separate column in the CSV output